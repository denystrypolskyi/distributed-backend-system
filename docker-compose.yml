services:
  auth-postgres:
    image: postgres:15
    container_name: auth-postgres
    restart: always
    environment:
      POSTGRES_DB: authdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: mysecurepass123
    ports:
      - "5433:5432" 
    volumes:
      - auth_postgres_data:/var/lib/postgresql/data

  product-postgres:
    image: postgres:15
    container_name: product-postgres
    restart: always
    environment:
      POSTGRES_DB: productdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: mysecurepass123
    ports:
      - "5434:5432"
    volumes:
      - product_postgres_data:/var/lib/postgresql/data
  order-postgres:
    image: postgres:15
    container_name: order-postgres
    restart: always
    environment:
      POSTGRES_DB: orderdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: mysecurepass123
    ports:
      - "5435:5432"
    volumes:
      - order_postgres_data:/var/lib/postgresql/data

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest

  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    container_name: zookeeper
    restart: always
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: kafka
    restart: always
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    container_name: auth-service
    depends_on:
      - auth-postgres
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://auth-postgres:5432/authdb
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: mysecurepass123
    ports:
      - "8083:8083"
  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    container_name: product-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://product-postgres:5432/productdb
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: mysecurepass123
    ports:
      - "8082:8082"
    depends_on:
      - product-postgres
  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    container_name: order-service
    depends_on:
      - order-postgres
      - rabbitmq
      - kafka
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://order-postgres:5432/orderdb
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: mysecurepass123
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      PRODUCT_SERVICE_URL: http://product-service:8082
    ports:
      - "8084:8084"
  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    container_name: notification-service
    depends_on:
      - rabbitmq
    environment:
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
      MAIL_USERNAME: ${MAIL_USERNAME}
      MAIL_PASSWORD: ${MAIL_PASSWORD}
    ports:
      - "8081:8081"
  log-consumer-service:
    build:
      context: ./log-consumer-service
      dockerfile: Dockerfile
    container_name: log-consumer-service
    depends_on:
      - kafka
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    ports:
      - "8085:8085"


volumes:
  auth_postgres_data:
  product_postgres_data:
  order_postgres_data: